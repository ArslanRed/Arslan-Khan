<section class="product-grid-section">
  <div class="grid-container">
    <h2 class="section-title">{{ section.settings.section_title }}</h2>
    
    <div class="product-grid">
      {% comment %} Show products from customizer blocks first {% endcomment %}
      {% assign products_shown = 0 %}
      {% for block in section.blocks %}
        {% if block.settings.product and block.settings.product != blank %}
          {% assign product = block.settings.product %}
          {% assign products_shown = products_shown | plus: 1 %}
          <div class="product-item" data-product-id="{{ product.id }}">
            <div class="product-image-container">
              {% if product.featured_image != blank %}
                <img src="{{ product.featured_image | image_url: width: 400 }}" 
                     alt="{{ product.title | escape }}" 
                     class="product-image"
                     loading="lazy"
                     width="400" 
                     height="400">
              {% else %}
                <div class="product-image-placeholder">
                  <svg width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
                    <circle cx="8.5" cy="8.5" r="1.5"/>
                    <polyline points="21,15 16,10 5,21"/>
                  </svg>
                  <p>{{ section.settings.no_image_text | default: 'No Image' }}</p>
                </div>
              {% endif %}

              <button class="product-info-btn" 
                      data-product-handle="{{ product.handle }}"
                      data-product-id="{{ product.id }}"
                      aria-label="View {{ product.title | escape }} details">
                <span class="info-icon">{{ section.settings.info_icon_text | default: '!' }}</span>
              </button>
              
              <div class="product-overlay">
                <h4 class="product-title">{{ product.title }}</h4>
                <p class="product-price">{{ product.price | money }}</p>
              </div>
            </div>
          </div>
        {% endif %}
      {% endfor %}

      {% comment %} Fill remaining slots if we have less than 6 products {% endcomment %}
      {% assign remaining_slots = 6 | minus: products_shown %}
      {% if remaining_slots > 0 %}
        {% if products_shown == 0 %}
          {% comment %} No products selected, show demo products {% endcomment %}
          {% assign demo_products = collections.all.products %}
          {% if demo_products.size == 0 %}
            {% for collection in collections %}
              {% if collection.products.size > 0 %}
                {% assign demo_products = collection.products %}
                {% break %}
              {% endif %}
            {% endfor %}
          {% endif %}
          
          {% for product in demo_products limit: 6 %}
            <div class="product-item" data-product-id="{{ product.id }}">
              <div class="product-image-container">
                {% if product.featured_image != blank %}
                  <img src="{{ product.featured_image | image_url: width: 400 }}" 
                       alt="{{ product.title | escape }}" 
                       class="product-image"
                       loading="lazy"
                       width="400" 
                       height="400">
                {% else %}
                  <div class="product-image-placeholder">
                    <svg width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
                      <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
                      <circle cx="8.5" cy="8.5" r="1.5"/>
                      <polyline points="21,15 16,10 5,21"/>
                    </svg>
                    <p>{{ product.title }}</p>
                  </div>
                {% endif %}

                <button class="product-info-btn" 
                        data-product-handle="{{ product.handle }}"
                        data-product-id="{{ product.id }}"
                        aria-label="View {{ product.title | escape }} details">
                  <span class="info-icon">{{ section.settings.info_icon_text | default: '!' }}</span>
                </button>
                
                <div class="product-overlay">
                  <h4 class="product-title">{{ product.title }}</h4>
                  <p class="product-price">{{ product.price | money }}</p>
                </div>
              </div>
            </div>
          {% endfor %}
        {% else %}
          {% comment %} Fill remaining slots with placeholders {% endcomment %}
          {% for i in (1..remaining_slots) %}
            <div class="product-item product-placeholder">
              <div class="product-image-container">
                <div class="product-image-placeholder">
                  <svg width="60" height="60" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
                    <circle cx="8.5" cy="8.5" r="1.5"/>
                    <polyline points="21,15 16,10 5,21"/>
                  </svg>
                  <p>Select Product</p>
                </div>
              </div>
            </div>
          {% endfor %}
        {% endif %}
      {% endif %}
    </div>
  </div>

  <!-- Product Popup Modal -->
  <div class="product-popup-overlay" id="productPopup">
    <div class="product-popup">
      <button class="popup-close" id="closePopup" aria-label="Close popup">&times;</button>

      
      <div class="popup-content">
        <div class="popup-image">
          <img id="popupProductImage" src="" alt="" loading="lazy">
        </div>
        
        <div class="popup-details">
          <h3 id="popupProductTitle" class="popup-title">Tennis Blue T-Shirt</h3>
          <p class="popup-price" id="popupProductPrice">980,00€</p>
          <div class="popup-description" id="popupProductDescription">
            This one-piece swimsuit is crafted from jersey featuring an allover micro Monogram motif in relief.
          </div>
          
          <form id="productForm" class="popup-form">
            <!-- Dynamic Color Selector -->
            <div id="colorSelector" class="color-selector">
              <label class="variant-label">Color</label>
              <div id="colorOptions" class="color-options"></div>
            </div>
            
            <!-- Dynamic Size Selector -->
            <div id="sizeSelector" class="size-selector">
              <label class="variant-label">Size</label>
              <select id="sizeSelect" class="size-dropdown">
                <option value="">Select Size</option>
              </select>
            </div>
            
            <input type="hidden" id="productId" name="id">
            <input type="hidden" id="quantity" name="quantity" value="1">
            
            <button type="submit" class="add-to-cart-btn" id="addToCartBtn">
              <span class="btn-text">ADD TO CART</span>
              <span class="btn-arrow">→</span>
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Load required fonts -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600;700&family=Lustria:wght@400&display=swap" rel="stylesheet">

<style>
/* Main Section Styles */
.product-grid-section {
  padding: 80px 20px;
  background: #f8f8f8;
}

.grid-container {
  max-width: 1200px;
  margin: 0 auto;
}

.section-title {
  display: block;
  text-align: left;
  font-size: 28px;
  font-weight: 700;
  margin-bottom: 30px;
  color: #000;
  position: relative;
  z-index: 5;
}

/* Product Grid */
.product-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 30px;
}

.product-item {
  position: relative;
  aspect-ratio: 1;
  background: #fff;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0px 2px 4px 0px #00000033;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.product-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 25px rgba(0,0,0,0.15);
}

.product-image-container {
  position: relative;
  width: 100%;
  height: 100%;
}

.product-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  display: block;
}

.product-image-placeholder {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: #f5f5f5;
  color: #999;
  border: 2px dashed #ddd;
}

.product-image-placeholder svg {
  color: #ccc;
  margin-bottom: 10px;
}

.product-image-placeholder p {
  margin: 0;
  font-size: 14px;
  font-weight: 500;
}

.product-placeholder .product-image-placeholder {
  border-color: #e0e0e0;
}

.product-placeholder .product-image-placeholder p {
  color: #bbb;
}

.product-overlay {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: linear-gradient(transparent, rgba(0,0,0,0.8));
  color: white;
  padding: 20px 15px 15px;
  transform: translateY(100%);
  transition: transform 0.3s ease;
}

.product-item:hover .product-overlay {
  transform: translateY(0);
}

.product-title {
  font-size: 16px;
  font-weight: 600;
  margin: 0 0 5px 0;
  line-height: 1.2;
}

.product-price {
  font-size: 14px;
  margin: 0;
  opacity: 0.9;
}

.product-info-btn { position: absolute; top: 15px; right: 15px; width: 35px; height: 35px; border-radius: 50%; background: rgba(255,255,255,0.95); border: 2px solid #000; cursor: pointer; display: flex; align-items: center; justify-content: center; transition: all 0.3s ease; z-index: 2; backdrop-filter: blur(5px); }
.product-info-btn:hover { background: #000; color: #fff; transform: scale(1.1); }
.info-icon { font-size: 16px; font-weight: bold; font-style: italic; }

.product-placeholder .product-info-btn {
  display: none;
}

/* Popup Styles - Exact Match */
.product-popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.8);
  display: none;
  z-index: 1000;
  align-items: center;
  justify-content: center;
  padding: 20px;
}

.product-popup-overlay.active {
  display: flex;
}

.product-popup {
  background: #FFFFFF;
  width: 311px;
  height: 447px;
  border-radius: 0;
  position: relative;
  overflow: visible;
  box-shadow: 0px 2px 4px 0px #00000033;
}

.popup-close {
  position: absolute;
  top: 10px;
  right: 10px;
  background: none;
  border: none;
  font-size: 30px;
  cursor: pointer;
  z-index: 10;
  color: #666;
  transition: color 0.3s ease;
}

.popup-close:hover {
  color: #000;
}


.popup-content {
  position: relative;
  width: 100%;
  height: 100%;
}

.popup-image {
  position: absolute;
  width: 120px;
  height: 140px;
  top: 36.42px;
  left: 17px;
 
  overflow: hidden;
}

.popup-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.popup-details {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.popup-title {
  position: absolute;
  width: 136px;
  height: 38px;
  top: 39px;
  left: 145px;
  font-family: 'Jost', sans-serif;
  font-weight: 300;
  font-size: 16px;
  line-height: 120%;
  color: #000000;
  margin: 0;
  display: flex;
  align-items: center;
}

.popup-price {
  position: absolute;
  width: 64px;
  height: 19px;
  top: 88px;
  left: 145px;
  font-family: 'Lustria', serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 120%;
  color: #000000;
  margin: 0;
  display: flex;
  align-items: center;
}

.popup-description {
  position: absolute;
  width: 146px;
  height: 60px;
  top: 119px;
  left: 145px;
  font-family: 'Jost', sans-serif;
  font-weight: 300;
  font-size: 14px;
  line-height: 110%;
  letter-spacing: -1%;
  color: #000000;
  margin: 0;
  display: flex;
  align-items: flex-start;
  overflow: hidden;
}

/* Color Selector - Exact Match */
.color-selector {
  position: absolute;
  width: 271px;
  height: 64.47715759277344px;
  top: 186px;
  left: 20px;
}

.variant-label {
  position: absolute;
  width: 33px;
  height: 18px;
  top: 0;
  left: 0;
  font-family: 'Jost', sans-serif;
  font-weight: 400;
  font-size: 14px;
  line-height: 130%;
  color: #333333;
  margin: 0;
}

.color-options {
  position: absolute;
  width: 271px;
  height: 40.441322326660156px;
  top: 24.04px;
  left: 0;
  border: 0.5px solid #000000;
  display: flex;
  background: #FFFFFF;
  overflow: hidden;
}

.color-option {
  position: relative;
  height: 40.441322326660156px;
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  font-family: 'Jost', sans-serif;
  font-weight: 400;
  font-size: 18px;
  line-height: 100%;
  letter-spacing: -2%;
  text-transform: capitalize;
  color: #000000;
  background:none;
  transition: background-color 0.3s ease;
  border-right: 0.5px solid #000000;
}

.color-option:last-child {
  border-right: none;
}

.color-option:not(.selected):hover {
  background: #f5f5f5;
}

.color-option.selected {
  background: #000000;
  color: #FFFFFF;
}

.color-option .color-line {
  position: absolute;
  left: 0;
  top: 0;
  width: 5.807142734527588px;
  height: 40.441322326660156px;
  border-right: 0.5px solid #000000;
}

.color-option .color-text {
  position: absolute;
  left: 15px;
  top: 50%;
  transform: translateY(-50%);
  width: auto;
  height: 18px;
  display: flex;
  align-items: center;
}

/* Size Selector - Exact Match */
.size-selector {
  position: absolute;
  width: 271px;
  height: 64px;
  top: 262px;
  left: 20px;
}

.size-selector .variant-label {
  position: absolute;
  width: 25px;
  height: 18px;
  top: 0;
  left: 0;
  font-family: 'Jost', sans-serif;
  font-weight: 400;
  font-size: 14px;
  line-height: 130%;
  color: #333333;
  margin: 0;
}

.size-dropdown {
  position: absolute;
  width: 271px;
  height: 40.439998626708984px;
  top: 24.35px;
  left: 0;
  border: 0.5px solid #000000;
  background: #FFFFFF;
  font-family: 'Jost', sans-serif;
  font-weight: 400;
  font-size: 14px;
  padding: 0 15px;
  appearance: none;
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%23000' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
  background-position: right 12px center;
  background-repeat: no-repeat;
  background-size: 16px;
  transition: all 0.3s;
}

.size-dropdown:focus {
  outline: 2px solid #333;
  outline-offset: 2px;
}
.size-dropdown option {
  background: #fff;
  color: #000;
}
/* Add to Cart Button - Exact Match */
.add-to-cart-btn {
  position: absolute;
  background: #000000;
  color: #FFFFFF;
  border: none;
  font-family: 'Jost', sans-serif;
  font-weight: 600;
  font-size: 14px;
  text-transform: uppercase;
  cursor: pointer;
  transition: all 0.3s ease;
  letter-spacing: 0.5px;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 25px;
  width: 87.5%;
  height: 44px;
  top: 350px;
  left: 20px;
}
.btn-arrow {
  font-size: 30px; 
  margin-bottom: 6px;
  font-weight: 600;
}
.add-to-cart-btn:hover {
  background: #333;
  transform: translateY(-4px);
}

.add-to-cart-btn:disabled {
  background: #ccc;
  cursor: not-allowed;
  transform: none;
}



/* Mobile Responsive Design */
@media (max-width: 768px) {
  .product-grid-section {
    padding: 50px 15px;
  }
  
  .section-title {
    text-align: center;
    font-size: 24px;
  }
  
  .product-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 15px;
  }
  

}

@media (max-width: 480px) {
  .product-grid {
    grid-template-columns: 1fr;
    gap: 15px;
  }
  
  .section-title {
    font-size: 22px;
  }
    .color-selector,
  .color-options,
  .size-selector,
  .size-dropdown {
    width: calc(96% - 7px); /* small padding to fit inside popup */
    left: 3;
  }

  /* Add 3px right margin to popup text content */
  
   .popup-description {
    
         /* margin from right */
    width: 120px;      /* stretch between left & right */
    overflow-wrap: break-word;
    display: block;
  }

  /* Adjust color option widths dynamically to not overflow */
  .color-option {
    width: auto;
    flex: 1 1 auto; /* let flex distribute evenly */
    min-width: 0; /* prevent overflow */
  }
 
}

/* Loading Animation */
.loading-spinner {
  width: 40px;
  height: 40px;
  border: 3px solid #f3f3f3;
  border-top: 3px solid #333;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 10px auto;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@keyframes slideInRight {
  from { 
    opacity: 0; 
    transform: translateX(100px); 
  }
  to { 
    opacity: 1; 
    transform: translateX(0); 
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const productButtons = document.querySelectorAll('.product-info-btn');
  const popup = document.getElementById('productPopup');
  const closeBtn = document.getElementById('closePopup');
  const productForm = document.getElementById('productForm');
  let currentProduct = null;

  if (!popup) return;

  // Color mapping for dynamic color display
  const colorMap = {
    'black': '#000000',
    'white': '#FFFFFF',
    'grey': '#AFAFB7',
    'gray': '#AFAFB7',
    'blue': '#0066CC',
    'red': '#CC0000',
    'green': '#00CC00',
    'yellow': '#FFCC00',
    'pink': '#FF69B4',
    'purple': '#8A2BE2',
    'orange': '#FF8C00',
    'brown': '#8B4513'
  };

  // Open popup
  function openPopup() {
    popup.classList.add('active');
    document.body.style.overflow = 'hidden';
  }

  // Close popup
  function closePopup() {
    popup.classList.remove('active');
    document.body.style.overflow = '';
  }

  // Close popup event listeners
  closeBtn.addEventListener('click', closePopup);
  popup.addEventListener('click', (e) => {
    if (e.target === popup) closePopup();
  });
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && popup.classList.contains('active')) closePopup();
  });

  // Product button click handlers
  productButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      const handle = this.dataset.productHandle;
      const id = this.dataset.productId;
      if (!handle) return;
      loadProductData(handle, id);
    });
  });

  /**
   * Load product data from Shopify API
   */
  async function loadProductData(handle, productId) {
    try {
      const response = await fetch(`/products/${handle}.js`);
      const product = await response.json();
      currentProduct = product;

      // Update popup content
      document.getElementById('popupProductImage').src = product.featured_image || '';
      document.getElementById('popupProductImage').alt = product.title || '';
      document.getElementById('popupProductTitle').textContent = product.title || '';
      document.getElementById('popupProductPrice').textContent = formatPrice(product.price);
      document.getElementById('popupProductDescription').innerHTML = product.description || '';
      
      // Generate dynamic variant selectors
      generateColorSelector(product);
      generateSizeSelector(product);
      
      openPopup();
    } catch (error) {
      console.error('Error loading product:', error);
      // Fallback display
      document.getElementById('popupProductTitle').textContent = 'Product Info';
      document.getElementById('popupProductPrice').textContent = 'Unavailable';
      document.getElementById('popupProductDescription').textContent = 'Unable to load product details';
      document.getElementById('colorOptions').innerHTML = '';
      document.getElementById('sizeSelect').innerHTML = '<option value="">Unavailable</option>';
      document.getElementById('productId').value = productId;
      openPopup();
    }
  }

  /**
   * Generate dynamic color selector based on product variants
   */
  function generateColorSelector(product) {
    const colorOptions = document.getElementById('colorOptions');
    const colorSelector = document.getElementById('colorSelector');
    colorOptions.innerHTML = '';

    if (!product.variants || product.variants.length === 0) {
      colorSelector.style.display = 'none';
      return;
    }

    // Extract unique colors from variants
    const colors = [];
    const colorOption = product.options.find(opt => {
      const name = opt.name.toLowerCase();
      return name === 'color' || name === 'colour' || name.includes('color');
    });

    if (!colorOption) {
      colorSelector.style.display = 'none';
      return;
    }

    colorSelector.style.display = 'block';
    const uniqueColors = [...new Set(colorOption.values)];
    
    uniqueColors.forEach((color, index) => {
      const colorBtn = document.createElement('button');
      colorBtn.type = 'button';
      colorBtn.className = 'color-option';
      colorBtn.dataset.color = color;
      
     

      // Create color line indicator
      const colorLine = document.createElement('div');
      colorLine.className = 'color-line';
      const colorValue = colorMap[color.toLowerCase()] || '#AFAFB7';
      colorLine.style.backgroundColor = colorValue;
      
      // Create color text
      const colorText = document.createElement('span');
      colorText.className = 'color-text';
      colorText.textContent = color;
      
      colorBtn.appendChild(colorLine);
      colorBtn.appendChild(colorText);
      
      // Set width based on number of colors
      const width = 271 / uniqueColors.length;
      colorBtn.style.width = width + 'px';
      
      // Add click handler
      colorBtn.addEventListener('click', function() {
        // Remove selected class from all color options
        colorOptions.querySelectorAll('.color-option').forEach(opt => {
          opt.classList.remove('selected');
        });
        // Add selected class to clicked option
        this.classList.add('selected');
        
        // Update available sizes and selected variant
        updateAvailableSizes();
        updateSelectedVariant();
      });
      
      colorOptions.appendChild(colorBtn);
    });

    // Select first color by default
    updateAvailableSizes();
  }

  /**
   * Generate dynamic size selector based on product variants
   */
  function generateSizeSelector(product) {
    const sizeSelect = document.getElementById('sizeSelect');
    const sizeSelector = document.getElementById('sizeSelector');
    sizeSelect.innerHTML = '<option value="">Select Size</option>';

    if (!product.variants || product.variants.length === 0) {
      sizeSelector.style.display = 'none';
      return;
    }

    // Check if product has size option
    const sizeOption = product.options.find(opt => {
      const name = opt.name.toLowerCase();
      return name === 'size' || name.includes('size');
    });

    if (!sizeOption) {
      sizeSelector.style.display = 'none';
      // If no size option, set the variant directly
      updateSelectedVariant();
      return;
    }

    sizeSelector.style.display = 'block';
    updateAvailableSizes();

    // Add change handler
    sizeSelect.addEventListener('change', function() {
      updateSelectedVariant();
    });
  }

  /**
   * Update available sizes based on selected color
   */
  function updateAvailableSizes() {
    if (!currentProduct) return;

    const sizeSelect = document.getElementById('sizeSelect');
    const selectedColorBtn = document.querySelector('.color-option.selected');
    const selectedColor = selectedColorBtn ? selectedColorBtn.dataset.color : null;

    sizeSelect.innerHTML = '<option value="">Select Size</option>';

    // Find size option
    const sizeOption = currentProduct.options.find(opt => {
      const name = opt.name.toLowerCase();
      return name === 'size' || name.includes('size');
    });

    if (!sizeOption) return;

    // Get available sizes for selected color
    const availableSizes = [];
    currentProduct.variants.forEach(variant => {
      if (!selectedColor || variant.option1 === selectedColor || variant.option2 === selectedColor) {
        const sizeIndex = currentProduct.options.findIndex(opt => opt.name.toLowerCase() === 'size');
        const size = variant.options[sizeIndex];
        if (size && variant.available && !availableSizes.includes(size)) {
          availableSizes.push(size);
        }
      }
    });

    // Sort sizes (basic sorting, you can enhance this)
    const sizeOrder = ['XS', 'S', 'M', 'L', 'XL', 'XXL'];
    availableSizes.sort((a, b) => {
      const aIndex = sizeOrder.indexOf(a);
      const bIndex = sizeOrder.indexOf(b);
      if (aIndex !== -1 && bIndex !== -1) {
        return aIndex - bIndex;
      }
      return a.localeCompare(b);
    });

    // Add size options
    availableSizes.forEach(size => {
      const option = document.createElement('option');
      option.value = size;
      option.textContent = size;
      sizeSelect.appendChild(option);
    });

    // Auto-select first available size
    if (availableSizes.length > 0) {
      sizeSelect.value = availableSizes[0];
    }
  }

  /**
   * Update selected variant based on current color and size selection
   */
  function updateSelectedVariant() {
    if (!currentProduct) return;

    const selectedColorBtn = document.querySelector('.color-option.selected');
    const selectedColor = selectedColorBtn ? selectedColorBtn.dataset.color : null;
    const selectedSize = document.getElementById('sizeSelect').value;

    // Find matching variant
    let selectedVariant = null;
    for (const variant of currentProduct.variants) {
      const colorMatches = !selectedColor || 
        variant.option1 === selectedColor ||
        variant.option2 === selectedColor ||
        variant.option3 === selectedColor;
      
      const sizeMatches = !selectedSize ||
        variant.option1 === selectedSize ||
        variant.option2 === selectedSize ||
        variant.option3 === selectedSize;

      if (colorMatches && sizeMatches) {
        selectedVariant = variant;
        break;
      }
    }

    // If no exact match found, try to find best match
    if (!selectedVariant && currentProduct.variants.length > 0) {
      selectedVariant = currentProduct.variants.find(v => v.available) || currentProduct.variants[0];
    }

    // Update form and button state
    if (selectedVariant) {
      document.getElementById('productId').value = selectedVariant.id;
      document.getElementById('popupProductPrice').textContent = formatPrice(selectedVariant.price);
      
      const addBtn = document.getElementById('addToCartBtn');
      if (selectedVariant.available) {
        addBtn.disabled = false;
        addBtn.querySelector('.btn-text').textContent = 'ADD TO CART';
      } else {
        addBtn.disabled = true;
        addBtn.querySelector('.btn-text').textContent = 'SOLD OUT';
      }
    }
  }

  /**
   * Handle form submission - Add to Cart
   */
  productForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    updateSelectedVariant();
    const formData = new FormData(this);
    const addBtn = document.getElementById('addToCartBtn');
    const originalText = addBtn.querySelector('.btn-text').textContent;
    
    // Update button state
    addBtn.disabled = true;
    addBtn.querySelector('.btn-text').textContent = 'ADDING...';

    try {
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error('Failed to add to cart');
      }

      const addedProduct = await response.json();
      
      // Check if we need to add bonus product
      await checkAndAddBonusProduct(addedProduct);
      
      // Success feedback
      addBtn.querySelector('.btn-text').textContent = 'ADDED!';
      addBtn.style.background = '#27ae60';
      
      // Update cart count
      updateCartCount();
      
      // Reset after delay
      setTimeout(() => {
        closePopup();
        addBtn.disabled = false;
        addBtn.querySelector('.btn-text').textContent = originalText;
        addBtn.style.background = '';
      }, 1500);
      
    } catch (error) {
      console.error('Add to cart error:', error);
      
      // Error feedback
      addBtn.querySelector('.btn-text').textContent = 'ERROR - TRY AGAIN';
      addBtn.style.background = '#e74c3c';
      
      // Reset after delay
      setTimeout(() => {
        addBtn.disabled = false;
        addBtn.querySelector('.btn-text').textContent = originalText;
        addBtn.style.background = '';
      }, 2000);
    }
  });

  /**
   * Check if added product qualifies for bonus product
   * Adds "Soft Winter Jacket" if product has Black + Medium variant
   */
async function checkAndAddBonusProduct(addedProduct) {
  try {
    // Fetch bonus product
    const bonusResponse = await fetch('/products/dark-winter-jacket.js');
    if (!bonusResponse.ok) return;
    const bonusProduct = await bonusResponse.json();

    if (!bonusProduct || !bonusProduct.variants || bonusProduct.variants.length === 0) return;

    // Pick first available variant
    const availableVariant = bonusProduct.variants.find(v => v.available) || bonusProduct.variants[0];

    if (!availableVariant) return;

    // Prepare form data
    const bonusFormData = new FormData();
    bonusFormData.append('id', availableVariant.id);
    bonusFormData.append('quantity', '1');

    // Add to cart
    await fetch('/cart/add.js', { method: 'POST', body: bonusFormData });

    // Show notification
    showBonusNotification();

  } catch (error) {
    console.error('Bonus product add error:', error);
  }
}



  /**
   * Show notification for bonus product
   */
  function showBonusNotification() {
    const notification = document.createElement('div');
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: #27ae60;
      color: white;
      padding: 15px 20px;
      border-radius: 5px;
      z-index: 10001;
      font-weight: 600;
      font-family: 'Jost', sans-serif;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      animation: slideInRight 0.3s ease-out;
      max-width: 300px;
    `;
    notification.textContent = 'Bonus: Soft Winter Jacket added to your cart!';
    
    document.body.appendChild(notification);
    
    // Remove notification after 4 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 4000);
  }

  /**
   * Update cart count in header/navigation
   */
  async function updateCartCount() {
    try {
      const response = await fetch('/cart.js');
      if (!response.ok) return;
      
      const cart = await response.json();
      
      // Update all elements with cart count
      document.querySelectorAll('[data-cart-count]').forEach(element => {
        element.textContent = cart.item_count;
      });
      
      // Dispatch custom event for other scripts
      document.dispatchEvent(new CustomEvent('cart:updated', { 
        detail: { cart } 
      }));
      
    } catch (error) {
      console.error('Failed to update cart count:', error);
    }
  }

  /**
   * Format price for display
   */
  function formatPrice(price) {
    if (typeof price !== 'number') return '$0.00';
    return new Intl.NumberFormat('en-US', { 
      style: 'currency', 
      currency: 'USD' 
    }).format(price / 100);
  }

  // Add styles for animations
  const style = document.createElement('style');
  style.textContent = `
    @keyframes slideInRight {
      from { 
        opacity: 0; 
        transform: translateX(100px); 
      }
      to { 
        opacity: 1; 
        transform: translateX(0); 
      }
    }
  `;
  document.head.appendChild(style);
});
const sizeSelect = document.getElementById('sizeSelect');

sizeSelect.addEventListener('change', function() {
  if (this.value) {
    // Selected a size: black background, white text
    this.style.backgroundColor = '#000';
    this.style.color = '#fff';
  } else {
    // Placeholder selected: white background, black text
    this.style.backgroundColor = '#fff';
    this.style.color = '#000';
  }
});

</script>

{% schema %}
{
  "name": "Product Grid Section",
  "settings": [
    {
      "type": "text",
      "id": "section_title",
      "label": "Section Title",
      "default": "Tisso vision in the wild"
    },
    {
      "type": "text",
      "id": "no_image_text",
      "label": "Placeholder Text for No Image",
      "default": "No Image"
    },
    {
      "type": "text",
      "id": "info_icon_text",
      "label": "Info Icon Text",
      "default": "!"
    }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select Product"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Product Grid Section",
      "blocks": [
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        }
      ]
    }
  ],
  "max_blocks": 6
}
{% endschema %}